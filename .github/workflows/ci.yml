name: CI

on:
  push:
    branches:
      - master
  pull_request:

permissions:
  actions: read
  contents: write  # Added for README updates

jobs:
  main:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          filter: tree:0
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      # This enables task distribution via Nx Cloud
      # Run this command as early as possible, before dependencies are installed
      # Learn more at https://nx.dev/ci/reference/nx-cloud-cli#npx-nxcloud-startcirun
      # Uncomment this line to enable task distribution
      # - run: npx nx start-ci-run --distribute-on="3 linux-medium-js" --stop-agents-after="build"

      # Cache node_modules
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - run: npm ci --legacy-peer-deps
      
      # Install jq for JSON parsing
      - run: sudo apt-get update && sudo apt-get install -y jq

      # Run all checks and capture results
      - name: Run Lint Tests
        id: lint
        run: |
          echo "Running lint checks..."
          nx run-many -t lint --all --json > lint-results.json 2>&1 || true
          LINT_ISSUES=$(jq -r '.results | length' lint-results.json 2>/dev/null || echo "0")
          LINT_STATUS=$([ "$LINT_ISSUES" -eq 0 ] && echo "PASS" || echo "FAIL")
          echo "lint_issues=$LINT_ISSUES" >> $GITHUB_OUTPUT
          echo "lint_status=$LINT_STATUS" >> $GITHUB_OUTPUT
          echo "Lint Status: $LINT_STATUS ($LINT_ISSUES issues)"

      - name: Run Tests
        id: test
        run: |
          echo "Running tests..."
          nx run-many -t test --all --json > test-results.json 2>&1 || true
          TEST_COUNT=$(jq -r '.results | length' test-results.json 2>/dev/null || echo "0")
          TEST_STATUS=$([ "$TEST_COUNT" -gt 0 ] && echo "PASS" || echo "FAIL")
          echo "test_count=$TEST_COUNT" >> $GITHUB_OUTPUT
          echo "test_status=$TEST_STATUS" >> $GITHUB_OUTPUT
          echo "Test Status: $TEST_STATUS ($TEST_COUNT test suites)"

      - name: Run Build
        id: build
        run: |
          echo "Running builds..."
          nx run-many -t build --all --json > build-results.json 2>&1 || true
          BUILD_COUNT=$(jq -r '.results | length' build-results.json 2>/dev/null || echo "0")
          BUILD_STATUS=$([ "$BUILD_COUNT" -gt 0 ] && echo "PASS" || echo "FAIL")
          echo "build_count=$BUILD_COUNT" >> $GITHUB_OUTPUT
          echo "build_status=$BUILD_STATUS" >> $GITHUB_OUTPUT
          echo "Build Status: $BUILD_STATUS ($BUILD_COUNT projects)"

      - name: Run Security Checks
        id: security
        run: |
          echo "Running security checks..."
          npm run quality:security > security-results.txt 2>&1 || true
          SECURITY_STATUS=$([ $? -eq 0 ] && echo "PASS" || echo "FAIL")
          VULNERABILITIES=$(npm audit --json 2>/dev/null | jq -r '.vulnerabilities | keys | length' || echo "0")
          echo "security_status=$SECURITY_STATUS" >> $GITHUB_OUTPUT
          echo "vulnerabilities=$VULNERABILITIES" >> $GITHUB_OUTPUT
          echo "Security Status: $SECURITY_STATUS ($VULNERABILITIES vulnerabilities)"

      # Update README with results (only on master branch)
      - name: Update README with CI Results
        if: github.ref == 'refs/heads/master'
        run: |
          echo "Updating README with CI results..."
          
          # Create updated README content
          cat > README-status.md << EOF
          ## 🚀 Project Status
          
          | Check | Status | Details |
          |-------|--------|---------|
          | **Lint** | ${{ steps.lint.outputs.lint_status == 'PASS' && '✅ PASS' || '❌ FAIL' }} | ${{ steps.lint.outputs.lint_issues }} issues found |
          | **Tests** | ${{ steps.test.outputs.test_status == 'PASS' && '✅ PASS' || '❌ FAIL' }} | ${{ steps.test.outputs.test_count }} test suites |
          | **Build** | ${{ steps.build.outputs.build_status == 'PASS' && '✅ PASS' || '❌ FAIL' }} | ${{ steps.build.outputs.build_count }} projects built |
          | **Security** | ${{ steps.security.outputs.security_status == 'PASS' && '✅ PASS' || '❌ FAIL' }} | ${{ steps.security.outputs.vulnerabilities }} vulnerabilities |
          
          ### 📊 Last Updated
          **Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")  
          **Commit**: ${{ github.sha }}  
          **Branch**: ${{ github.ref_name }}  
          **Workflow**: [View Details](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          ### 🔍 Security Details
          \`\`\`bash
          npm run quality:security
          \`\`\`
          
          \`\`\`
          $(cat security-results.txt | tail -20)
          \`\`\`
          
          ### 📈 Quality Metrics
          - **Total Projects**: ${{ steps.build.outputs.build_count }}
          - **Dependencies**: $(npm list --depth=0 2>/dev/null | wc -l) packages
          - **Build Time**: ~$(date +%s) seconds
          - **Node Version**: $(node --version)
          - **NPM Version**: $(npm --version)
          
          ---
          EOF
          
          # Update README.md
          if [ -f README.md ]; then
            # Find the start of the status section and replace it
            awk '/## 🚀 Project Status/{flag=1; next} /^---$/{if(flag) flag=0} !flag' README.md > README-temp.md
            cat README-status.md >> README-temp.md
            mv README-temp.md README.md
          else
            mv README-status.md README.md
          fi
          
          echo "README updated successfully"

      - name: Commit and Push README Updates
        if: github.ref == 'refs/heads/master'
        run: |
          echo "Committing README updates..."
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          git commit -m "📊 Update README with latest CI results [skip ci]" || echo "No changes to commit"
          git push || echo "Nothing to push"

      # Nx Cloud recommends fixes for failures to help you get CI green faster. Learn more: https://nx.dev/ci/features/self-healing-ci
      - run: npx nx fix-ci
        if: always()
