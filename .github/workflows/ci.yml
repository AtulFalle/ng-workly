name: CI

on:
  push:
    branches:
      - master
  pull_request:

permissions:
  actions: read
  contents: write  # Added for README updates

jobs:
  main:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          filter: tree:0
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      # This enables task distribution via Nx Cloud
      # Run this command as early as possible, before dependencies are installed
      # Learn more at https://nx.dev/ci/reference/nx-cloud-cli#npx-nxcloud-startcirun
      # Uncomment this line to enable task distribution
      # - run: npx nx start-ci-run --distribute-on="3 linux-medium-js" --stop-agents-after="build"

      # Cache node_modules
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - run: npm ci --legacy-peer-deps
      
      # Install jq for JSON parsing
      - run: sudo apt-get update && sudo apt-get install -y jq

      # Run all checks and capture results
      - name: Run Lint Tests
        id: lint
        run: |
          echo "Running lint checks..."
          nx run-many -t lint --all --json > lint-results.json 2>&1 || true
          nx run-many -t lint --all > lint-results.txt 2>&1 || true
          LINT_ISSUES=$(jq -r '.results | length' lint-results.json 2>/dev/null || echo "0")
          LINT_STATUS=$([ "$LINT_ISSUES" -eq 0 ] && echo "PASS" || echo "FAIL")
          echo "lint_issues=$LINT_ISSUES" >> $GITHUB_OUTPUT
          echo "lint_status=$LINT_STATUS" >> $GITHUB_OUTPUT
          echo "Lint Status: $LINT_STATUS ($LINT_ISSUES issues)"

      - name: Run Tests
        id: test
        run: |
          echo "Running tests..."
          nx run-many -t test --all --json > test-results.json 2>&1 || true
          TEST_COUNT=$(jq -r '.results | length' test-results.json 2>/dev/null || echo "0")
          TEST_STATUS=$([ "$TEST_COUNT" -gt 0 ] && echo "PASS" || echo "FAIL")
          echo "test_count=$TEST_COUNT" >> $GITHUB_OUTPUT
          echo "test_status=$TEST_STATUS" >> $GITHUB_OUTPUT
          echo "Test Status: $TEST_STATUS ($TEST_COUNT test suites)"

      - name: Run Build
        id: build
        run: |
          echo "Running builds..."
          START_TIME=$(date +%s)
          nx run-many -t build --all --json > build-results.json 2>&1 || true
          END_TIME=$(date +%s)
          BUILD_DURATION=$((END_TIME - START_TIME))
          BUILD_COUNT=$(jq -r '.results | length' build-results.json 2>/dev/null || echo "0")
          BUILD_STATUS=$([ "$BUILD_COUNT" -gt 0 ] && echo "PASS" || echo "FAIL")
          echo "build_count=$BUILD_COUNT" >> $GITHUB_OUTPUT
          echo "build_status=$BUILD_STATUS" >> $GITHUB_OUTPUT
          echo "build_duration=$BUILD_DURATION" >> $GITHUB_OUTPUT
          echo "start_time=$START_TIME" >> $GITHUB_OUTPUT
          echo "Build Status: $BUILD_STATUS ($BUILD_COUNT projects) in ${BUILD_DURATION}s"

      - name: Run Security Checks
        id: security
        run: |
          echo "Running security checks..."
          npm run quality:security > security-results.txt 2>&1 || true
          SECURITY_STATUS=$([ $? -eq 0 ] && echo "PASS" || echo "FAIL")
          VULNERABILITIES=$(npm audit --json 2>/dev/null | jq -r '.vulnerabilities | keys | length' || echo "0")
          echo "security_status=$SECURITY_STATUS" >> $GITHUB_OUTPUT
          echo "vulnerabilities=$VULNERABILITIES" >> $GITHUB_OUTPUT
          echo "Security Status: $SECURITY_STATUS ($VULNERABILITIES vulnerabilities)"

      # Update README with results (only on master branch)
      - name: Update README with CI Results
        if: github.ref == 'refs/heads/master'
        run: |
          echo "Updating README with CI results..."
          
          # Get actual test coverage data
          if [ -f coverage/coverage-summary.json ]; then
            COVERAGE_DATA=$(cat coverage/coverage-summary.json | jq -r '.total.lines.pct // "N/A"')
            UNIT_COVERAGE=$(cat coverage/coverage-summary.json | jq -r '.total.lines.pct // "N/A"')
          else
            COVERAGE_DATA="N/A"
            UNIT_COVERAGE="N/A"
          fi
          
          # Get actual build time and bundle size
          BUILD_TIME="${{ steps.build.outputs.build_duration }}s"
          BUNDLE_SIZE=$(find dist -name "*.js" -exec du -ch {} + 2>/dev/null | tail -1 | cut -f1 || echo "N/A")
          
          # Get actual code smells count from lint results
          if [ -f lint-results.txt ]; then
            CODE_SMELLS=$(grep -c "sonarjs/" lint-results.txt 2>/dev/null || echo "0")
            COMPLEXITY_ISSUES=$(grep -c "cognitive-complexity" lint-results.txt 2>/dev/null || echo "0")
          else
            CODE_SMELLS="0"
            COMPLEXITY_ISSUES="0"
          fi
          
          # Get actual project count
          PROJECT_COUNT=$(find . -name "project.json" -not -path "./node_modules/*" | wc -l)
          
          # Get actual dependency count
          DEPENDENCY_COUNT=$(npm list --depth=0 2>/dev/null | wc -l || echo "N/A")
          
          # Create updated README content with real data
          cat > README-status.md << EOF
          ## üöÄ Project Health Dashboard
          
          | üß™ **Testing** | üèóÔ∏è **Build** | üîí **Security** | üìä **Quality** |
          |:---:|:---:|:---:|:---:|
          | **Status** | ${{ steps.test.outputs.test_status == 'PASS' && '‚úÖ PASS' || '‚ùå FAIL' }} | ${{ steps.build.outputs.build_status == 'PASS' && '‚úÖ PASS' || '‚ùå FAIL' }} | ${{ steps.security.outputs.security_status == 'PASS' && '‚úÖ PASS' || '‚ùå FAIL' }} | ${{ steps.lint.outputs.lint_status == 'PASS' && '‚úÖ PASS' || '‚ùå FAIL' }} |
          | **Coverage** | ${COVERAGE_DATA}% | **Projects** | ${PROJECT_COUNT} | **Vulnerabilities** | ${{ steps.security.outputs.vulnerabilities }} | **Issues** | ${{ steps.lint.outputs.lint_issues }} |
          | **Suites** | ${{ steps.test.outputs.test_count }} | **Time** | ${BUILD_TIME}s | **Score** | $([ "${{ steps.security.outputs.vulnerabilities }}" -eq 0 ] && echo "A+" || echo "B") | **Smells** | ${CODE_SMELLS} |
          
          ### üìà Detailed Metrics
          
          <table>
          <tr>
          <td width="50%">
          
          #### üß™ Test Coverage
          - **Unit Tests**: ${UNIT_COVERAGE}% coverage
          - **Integration Tests**: N/A (not configured)
          - **E2E Tests**: N/A (not configured)
          - **Total Suites**: ${{ steps.test.outputs.test_count }}
          
          #### üèóÔ∏è Build Information
          - **Projects Built**: ${PROJECT_COUNT}
          - **Build Time**: ${BUILD_TIME} seconds
          - **Bundle Size**: ${BUNDLE_SIZE}
          - **Dependencies**: ${DEPENDENCY_COUNT} packages
          
          </td>
          <td width="50%">
          
          #### üîí Security Status
          - **Vulnerabilities**: ${{ steps.security.outputs.vulnerabilities }}
          - **High/Critical**: $([ "${{ steps.security.outputs.vulnerabilities }}" -gt 0 ] && echo "Check report" || echo "0")
          - **Security Score**: $([ "${{ steps.security.outputs.vulnerabilities }}" -eq 0 ] && echo "A+" || echo "B")
          - **Last Audit**: $(date -u +"%Y-%m-%d")
          
          #### üìä Quality Metrics
          - **Lint Issues**: ${{ steps.lint.outputs.lint_issues }}
          - **Code Smells**: ${CODE_SMELLS}
          - **Complexity Issues**: ${COMPLEXITY_ISSUES}
          - **Duplicates**: N/A (not configured)
          
          </td>
          </tr>
          </table>
          
          ### üîç System Information
          
          | Component | Version | Status |
          |-----------|---------|--------|
          | **Node.js** | $(node --version) | ‚úÖ Active |
          | **NPM** | $(npm --version) | ‚úÖ Active |
          | **Nx** | $(npx nx --version 2>/dev/null || echo "N/A") | ‚úÖ Active |
          | **Angular** | $(npm list @angular/core --depth=0 2>/dev/null | grep @angular/core | cut -d'@' -f3 | cut -d' ' -f1 || echo "N/A") | ‚úÖ Active |
          | **TypeScript** | $(npm list typescript --depth=0 2>/dev/null | grep typescript | cut -d'@' -f3 | cut -d' ' -f1 || echo "N/A") | ‚úÖ Active |
          
          ### üìÖ Last Updated
          **Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")  
          **Commit**: \`${{ github.sha }}\`  
          **Branch**: \`${{ github.ref_name }}\`  
          **Workflow**: [View Details](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          ---
          EOF
          
          # Update README.md - Insert status section after the badges
          if [ -f README.md ]; then
            # Find the end of the badges section and insert status there
            awk '/^<\/div>/{print; print ""; print "<!-- CI Status Section - Auto-generated -->"; flag=1; next} flag && /^## /{print ""; print "---"; print ""; flag=0} !flag' README.md > README-temp.md
            cat README-status.md >> README-temp.md
            mv README-temp.md README.md
          else
            mv README-status.md README.md
          fi
          
          echo "README updated successfully"

      - name: Commit and Push README Updates
        if: github.ref == 'refs/heads/master'
        run: |
          echo "Committing README updates..."
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Fetch latest changes
          git fetch origin master
          
          # Try to merge or rebase
          git merge origin/master || git rebase origin/master || git reset --hard origin/master
          
          git add README.md
          git commit -m "ci: update project status in README [skip ci]" || echo "No changes to commit"
          
          # Push with retry logic
          for i in {1..3}; do
            if git push origin master; then
              echo "Push successful"
              break
            else
              echo "Push attempt $i failed, retrying..."
              git pull origin master --rebase
              sleep 5
            fi
          done

      # Nx Cloud recommends fixes for failures to help you get CI green faster. Learn more: https://nx.dev/ci/features/self-healing-ci
      - run: npx nx fix-ci
        if: always()
