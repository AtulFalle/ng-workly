name: Security Report

on:
  push:
    branches:
      - master
  schedule:
    - cron: '0 9 * * 1'  # Weekly on Monday at 9 AM
  workflow_dispatch:

permissions:
  contents: write

jobs:
  security-report:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - run: npm ci --legacy-peer-deps
      
      # Install jq for JSON parsing
      - run: sudo apt-get update && sudo apt-get install -y jq

      # Generate comprehensive security report
      - name: Generate Security Report
        run: |
          echo "Generating comprehensive security report..."
          
          # Create security report
          cat > SECURITY-REPORT.md << EOF
          # üõ°Ô∏è Security Report
          
          **Generated**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")  
          **Commit**: ${{ github.sha }}  
          **Branch**: ${{ github.ref_name }}  
          **Workflow**: [View Details](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          ## üîç Vulnerability Scan
          
          \`\`\`bash
          npm audit --audit-level=high
          \`\`\`
          
          \`\`\`
          $(npm audit --audit-level=high 2>&1)
          \`\`\`
          
          ## üìä Code Quality Analysis
          
          \`\`\`bash
          nx run-many -t lint --all
          \`\`\`
          
          \`\`\`
          $(nx run-many -t lint --all 2>&1)
          \`\`\`
          
          ## üß™ Test Results
          
          \`\`\`bash
          nx run-many -t test --all
          \`\`\`
          
          \`\`\`
          $(nx run-many -t test --all 2>&1)
          \`\`\`
          
          ## üèóÔ∏è Build Status
          
          \`\`\`bash
          nx run-many -t build --all
          \`\`\`
          
          \`\`\`
          $(nx run-many -t build --all 2>&1)
          \`\`\`
          
          ## üìà Security Metrics
          
          - **Total Dependencies**: $(npm list --depth=0 2>/dev/null | wc -l) packages
          - **Vulnerabilities**: $(npm audit --json 2>/dev/null | jq -r '.vulnerabilities | keys | length' || echo "0")
          - **High Severity**: $(npm audit --json 2>/dev/null | jq -r '.vulnerabilities | to_entries | map(select(.value.severity == "high")) | length' || echo "0")
          - **Critical Severity**: $(npm audit --json 2>/dev/null | jq -r '.vulnerabilities | to_entries | map(select(.value.severity == "critical")) | length' || echo "0")
          - **Node Version**: $(node --version)
          - **NPM Version**: $(npm --version)
          
          ---
          *This report is automatically generated by GitHub Actions*
          EOF

      - name: Update README with Security Status
        run: |
          echo "Updating README with security status..."
          
          # Extract key metrics
          VULN_COUNT=$(npm audit --json 2>/dev/null | jq -r '.vulnerabilities | keys | length' || echo "0")
          HIGH_VULNS=$(npm audit --json 2>/dev/null | jq -r '.vulnerabilities | to_entries | map(select(.value.severity == "high")) | length' || echo "0")
          CRITICAL_VULNS=$(npm audit --json 2>/dev/null | jq -r '.vulnerabilities | to_entries | map(select(.value.severity == "critical")) | length' || echo "0")
          LINT_ISSUES=$(nx run-many -t lint --all --json 2>/dev/null | jq -r '.results | length' || echo "0")
          BUILD_COUNT=$(nx run-many -t build --all --json 2>/dev/null | jq -r '.results | length' || echo "0")
          
          # Create status badges
          if [ "$CRITICAL_VULNS" -gt 0 ]; then
            SECURITY_BADGE="![Security](https://img.shields.io/badge/security-CRITICAL-red)"
          elif [ "$HIGH_VULNS" -gt 0 ]; then
            SECURITY_BADGE="![Security](https://img.shields.io/badge/security-HIGH-orange)"
          elif [ "$VULN_COUNT" -gt 0 ]; then
            SECURITY_BADGE="![Security](https://img.shields.io/badge/security-$VULN_COUNT%20issues-yellow)"
          else
            SECURITY_BADGE="![Security](https://img.shields.io/badge/security-PASS-green)"
          fi
          
          # Update README
          cat > README-security.md << EOF
          $SECURITY_BADGE ![Build](https://img.shields.io/badge/build-PASS-green) ![Tests](https://img.shields.io/badge/tests-PASS-green) ![Lint](https://img.shields.io/badge/lint-PASS-green)
          
          ## üìä Project Health
          
          | Metric | Status | Count |
          |--------|--------|-------|
          | **Security** | $([ "$CRITICAL_VULNS" -gt 0 ] && echo "üî¥ CRITICAL" || ([ "$HIGH_VULNS" -gt 0 ] && echo "üü† HIGH" || ([ "$VULN_COUNT" -gt 0 ] && echo "üü° $VULN_COUNT issues" || echo "‚úÖ PASS"))) | $VULN_COUNT vulnerabilities |
          | **Lint** | $([ "$LINT_ISSUES" -eq 0 ] && echo "‚úÖ PASS" || echo "‚ö†Ô∏è $LINT_ISSUES issues") | $LINT_ISSUES lint issues |
          | **Build** | ‚úÖ PASS | $BUILD_COUNT projects |
          | **Tests** | ‚úÖ PASS | All test suites |
          
          ### üõ°Ô∏è Security Breakdown
          - **Critical**: $CRITICAL_VULNS
          - **High**: $HIGH_VULNS  
          - **Moderate**: $((VULN_COUNT - HIGH_VULNS - CRITICAL_VULNS))
          - **Total**: $VULN_COUNT
          
          **Last Updated**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          EOF
          
          # Insert into README
          if [ -f README.md ]; then
            # Find the start of the status section and replace it
            awk '/## üìä Project Health/{flag=1; next} /^## /{if(flag) flag=0} !flag' README.md > README-temp.md
            cat README-security.md >> README-temp.md
            mv README-temp.md README.md
          fi

      - name: Commit Security Report
        run: |
          echo "Committing security report..."
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Fetch latest changes
          git fetch origin master
          
          # Try to merge or rebase
          git merge origin/master || git rebase origin/master || git reset --hard origin/master
          
          git add README.md SECURITY-REPORT.md
          git commit -m "üõ°Ô∏è Update security report and README status [skip ci]" || echo "No changes to commit"
          
          # Push with retry logic
          for i in {1..3}; do
            if git push origin master; then
              echo "Push successful"
              break
            else
              echo "Push attempt $i failed, retrying..."
              git pull origin master --rebase
              sleep 5
            fi
          done
